from cyclonedx.model.impact_analysis import ImpactAnalysisAffectedStatus
from cyclonedx.model.vulnerability import Vulnerability, VulnerabilitySource,VulnerabilityScoreSource, VulnerabilityRating, VulnerabilitySeverity, BomTarget, BomTargetVersionRange
import requests
import json

def fetch_nist(url: str, id: str) -> dict:
    data = None
    nist_resp = requests.get(url)
    if nist_resp.status_code != 200:
        print("error fetching "+id)
    else:
        data = nist_resp.json()
        with open("data/nist_"+id+".json", "w") as dest:
            json.dump({"url":url, "data": data}, dest, indent=True)
    return data
def extract_relevant_parts(nist_resp: dict) -> dict:
    # todo: this can use a unit test at some point
    ratings = []

    cve = nist_resp["vulnerabilities"][0]["cve"]

    for metrics in cve["metrics"]["cvssMetricV31"]:
        #todo: do we need recommendations from NIST as well?
        relevant = {}
        relevant["source"] = metrics["source"]
        relevant["score"] = metrics["cvssData"]["baseScore"]
        relevant["severity"] = metrics["cvssData"]["baseSeverity"]
        relevant["method"] = "CVSSv3" #is this always true?
        relevant["vector"] = metrics["cvssData"]["vectorString"]
        ratings.append(relevant)
    return ratings

def enhance(vulns: list[Vulnerability]):
    for vuln in vulns:
        id = vuln.id
        url = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=' + id
        nist_resp = fetch_nist(url, id)
        relevant = extract_relevant_parts(nist_resp)
        print("\n\n\n\n\n\nvuln: "+id)
        print(json.dumps(relevant, indent=True))
        for rating in relevant:
            #todo: convert the ratings into the cyclonedx enums? 
            vr = VulnerabilityRating(
                source = VulnerabilitySource(url=rating["source"]),
                score = rating["score"],
                vector = rating["vector"] ,
                method = VulnerabilityScoreSource.CVSS_V3_1
            )
            vuln.ratings.add(vr)
        print(vuln)